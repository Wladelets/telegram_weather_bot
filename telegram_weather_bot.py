import os
import logging
from datetime import datetime
import pytz
import requests
from geopy.geocoders import Nominatim
from telegram import Update, KeyboardButton, ReplyKeyboardMarkup
from telegram import ReplyKeyboardRemove
from telegram.ext import Application, CommandHandler, MessageHandler, ContextTypes, filters
from dotenv import load_dotenv

load_dotenv()

# üîê –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
OWM_KEY = os.getenv("OWM_API_KEY")

# ===üõ† –õ–û–ì–ì–ï–†===
logging.basicConfig(format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO)
logger = logging.getLogger(__name__)

# ===üìç /start ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    button = KeyboardButton(text="üåç –ü—Ä–∏–≤–µ—Ç! –î–∞–π —Å–≤—è–∑—å!", request_location=True)
    keyboard = ReplyKeyboardMarkup([[button]], resize_keyboard=True, one_time_keyboard=True)
    await update.message.reply_text("–ö–∞–∫ —Ç—ã? –î—Ä—É–≥! ‚¨áÔ∏è", reply_markup=keyboard)

# ===üì¶ –û–ë–†–ê–ë–û–¢–ö–ê –õ–û–ö–ê–¶–ò–ò===
async def handle_location(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message = update.message
    user = update.effective_user
    location = message.location

    lat = location.latitude
    lon = location.longitude

    # –ò–º—è –∏–ª–∏ username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    username = f"@{user.username}" if user.username else f"{user.full_name} (id:{user.id})"

    # –ü–æ–ª—É—á–∞–µ–º –∞–¥—Ä–µ—Å
    geolocator = Nominatim(user_agent="telegram-weather-bot")
    address = "–Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å"
    try:
        location_info = geolocator.reverse((lat, lon), language="ru", timeout=10)
        if location_info:
            address = location_info.address
    except Exception as e:
        logger.warning(f"Geo error: {e}")

    # –ú–µ—Å—Ç–Ω–æ–µ –≤—Ä–µ–º—è
    try:
        tz = pytz.timezone("Europe/Chisinau")
        local_time = datetime.now(tz).strftime("%Y-%m-%d %H:%M:%S")
    except Exception:
        local_time = "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å"

    base_message = (
        f"{username}, [{datetime.now().strftime('%d.%m.%Y %H:%M')}]\n"
        f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ:\n"
        f"üåç –®–∏—Ä–æ—Ç–∞: {lat:.5f}\n"
        f"üåç –î–æ–ª–≥–æ—Ç–∞: {lon:.5f}\n\n"
        f"üìç –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: {address}\n\n"
        f"üïí –ú–µ—Å—Ç–Ω–æ–µ –≤—Ä–µ–º—è: {local_time} (Europe/Chisinau)\n\n"
    )

    # –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã
    forecast_message = ""
    try:
        url = (
            f"https://api.openweathermap.org/data/2.5/forecast?"
            f"lat={lat}&lon={lon}&appid={OWM_KEY}&units=metric&lang=ru"
        )
        res = requests.get(url)
        data = res.json()

        if "list" in data:
            forecast = data["list"][:4]
            forecast_message = "‚òÅÔ∏è –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã:\n"
            for entry in forecast:
                dt_txt = entry["dt_txt"]
                temp = entry["main"]["temp"]
                description = entry["weather"][0]["description"]
                forecast_message += f"{dt_txt}: {temp}¬∞C, {description}\n"
        else:
            forecast_message = "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã."
    except Exception as e:
        logger.error(f"Weather error: {e}")
        forecast_message = "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–≥–æ–¥—ã."

    await message.reply_text(base_message + forecast_message)
# –£–¥–∞–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ—Å–ª–µ –æ—Ç–≤–µ—Ç–∞
await message.reply_text("–°–ø–∞—Å–∏–±–æ! üõ∞", reply_markup=ReplyKeyboardRemove())

# ===üöÄ MAIN ===
def main():
    if not BOT_TOKEN or not OWM_KEY:
        raise ValueError("–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è TELEGRAM_BOT_TOKEN –∏ OWM_API_KEY –Ω–µ –∑–∞–¥–∞–Ω—ã!")

    port = int(os.environ.get("PORT", 10000))
    host = os.environ.get("RENDER_EXTERNAL_HOSTNAME")
    webhook_url = f"https://{host}/{BOT_TOKEN}"

    app = Application.builder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.LOCATION, handle_location))

    logger.info("Bot started")

    app.run_webhook(
        listen="0.0.0.0",
        port=port,
        webhook_url=webhook_url
    )


if __name__ == "__main__":
    main()

