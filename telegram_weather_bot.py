import os
import logging
import pytz
import requests
from datetime import datetime
from geopy.geocoders import Nominatim
from dotenv import load_dotenv
from telegram import Update, ReplyKeyboardRemove
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters,
)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
OWM_KEY = os.getenv("OWM_API_KEY")
OWNER_ID = int(os.getenv("OWNER_ID"))

# –õ–æ–≥–≥–µ—Ä
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


# ===üì¶ –û–±—Ä–∞–±–æ—Ç–∫–∞ –ª–æ–∫–∞—Ü–∏–∏ ===
async def handle_location(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message = update.message
    await message.reply_text("–°–ø–∞—Å–∏–±–æ! üõ∞", reply_markup=ReplyKeyboardRemove())

    user = update.effective_user
    location = message.location

    lat = location.latitude
    lon = location.longitude

    username = f"@{user.username}" if user.username else f"{user.full_name} (id:{user.id})"

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞
    geolocator = Nominatim(user_agent="telegram-weather-bot")
    address = "–Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å"
    try:
        location_info = geolocator.reverse((lat, lon), language="ru", timeout=10)
        if location_info:
            address = location_info.address
    except Exception as e:
        logger.warning(f"Geo error: {e}")

    # –õ–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è (Europe/Chisinau ‚Äî –º–æ–∂–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å –ø—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏)
    try:
        tz = pytz.timezone("Europe/Chisinau")
        local_time = datetime.now(tz).strftime("%Y-%m-%d %H:%M:%S")
    except Exception:
        local_time = "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å"

    # –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    reply_msg = (
        f"üåç –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã:\n"
        f"–®–∏—Ä–æ—Ç–∞: {lat:.5f}\n"
        f"–î–æ–ª–≥–æ—Ç–∞: {lon:.5f}\n\n"
        f"üìç –ê–¥—Ä–µ—Å: {address}\n"
        f"üïí –ú–µ—Å—Ç–Ω–æ–µ –≤—Ä–µ–º—è: {local_time} (Europe/Chisinau)\n"
    )

    # –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã
    forecast = ""
    try:
        url = f"https://api.openweathermap.org/data/2.5/forecast?lat={lat}&lon={lon}&appid={OWM_KEY}&units=metric&lang=ru"
        res = requests.get(url)
        data = res.json()
        if "list" in data:
            forecast += "\n‚òÅÔ∏è –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã:\n"
            for entry in data["list"][:4]:
                dt = entry["dt_txt"]
                temp = entry["main"]["temp"]
                desc = entry["weather"][0]["description"]
                forecast += f"{dt}: {temp}¬∞C, {desc}\n"
        else:
            forecast += "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–≥–æ–¥—É."
    except Exception as e:
        logger.error(f"Weather error: {e}")
        forecast += "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–≥–æ–¥—ã."

    # –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await message.reply_text(reply_msg + forecast)

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –∞–¥–º–∏–Ω—É
    full_msg = (
        f"üß≠ –ü–æ–ª—É—á–µ–Ω–∞ –ª–æ–∫–∞—Ü–∏—è –æ—Ç {username}\n"
        f"üìç –ê–¥—Ä–µ—Å: {address}\n"
        f"üåê –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {lat:.5f}, {lon:.5f}\n"
        f"üïí –í—Ä–µ–º—è: {local_time}\n" +
        forecast
    )
    await context.bot.send_message(chat_id=ADMIN_ID, text=full_msg)


# === /start ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –ü—Ä–∏—à–ª–∏ —Å–≤–æ—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é üìç")


# === MAIN ===
async def main():
    if not BOT_TOKEN or not OWM_KEY or not OWNER_ID:
        raise ValueError("–ù–µ –∑–∞–¥–∞–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ TELEGRAM_BOT_TOKEN, OWM_API_KEY –∏–ª–∏ ADMIN_ID!")

    port = int(os.environ.get("PORT", 10000))
    host = os.environ.get("RENDER_EXTERNAL_HOSTNAME")
    webhook_url = f"https://{host}/{BOT_TOKEN}"

    application = Application.builder().token(BOT_TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.LOCATION, handle_location))

    logger.info("Bot started")

    await application.run_webhook(
        listen="0.0.0.0",
        port=port,
        webhook_url=webhook_url,
    )

if __name__ == "__main__":
    import asyncio
    try:
        asyncio.get_event_loop().run_until_complete(main())
    except RuntimeError:
        # Fallback for already running loop (Render, notebooks –∏ —Ç.–ø.)
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        loop.run_until_complete(main())


