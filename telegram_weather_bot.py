import os
import logging
import pytz
import requests
from datetime import datetime
from geopy.geocoders import Nominatim
from dotenv import load_dotenv
from telegram import Update, ReplyKeyboardRemove
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters,
)
import asyncio

# === –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è ===
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
OPENWEATHER_API_KEY = os.getenv("OPENWEATHER_API_KEY")
ADMIN_ID = int(os.getenv("ADMIN_ID"))
WEBHOOK_URL = os.getenv("WEBHOOK_URL")

# === –õ–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ===
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


# === –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ ===
async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE):
    logger.error(msg="\u274c –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:", exc_info=context.error)
    if isinstance(update, Update) and update.message:
        await update.message.reply_text("\u26a0\ufe0f –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ú—ã —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ —ç—Ç–∏–º.")


# === –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ ===
async def handle_location(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message = update.message
    await message.reply_text("\u0421–ø–∞—Å–∏–±–æ! üõ†", reply_markup=ReplyKeyboardRemove())

    user = update.effective_user
    location = message.location
    lat = location.latitude
    lon = location.longitude
    username = f"@{user.username}" if user.username else f"{user.full_name} (id:{user.id})"

    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞
    address = "–Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å"
    try:
        geolocator = Nominatim(user_agent="telegram-weather-bot")
        location_info = geolocator.reverse((lat, lon), language="ru", timeout=10)
        if location_info:
            address = location_info.address
    except Exception as e:
        logger.warning(f"Geo error: {e}")

    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
    try:
        tz = pytz.timezone("Europe/Kiev")
        local_time = datetime.now(tz).strftime("%Y-%m-%d %H:%M:%S")
    except Exception:
        local_time = "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å"

    # –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã
    forecast = ""
    try:
        url = f"https://api.openweathermap.org/data/2.5/forecast?lat={lat}&lon={lon}&appid={OPENWEATHER_API_KEY}&units=metric&lang=ru"
        res = requests.get(url)
        res.raise_for_status()
        data = res.json()

        if "list" in data:
            forecast += "\n‚òÅÔ∏è –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã:\n"
            for entry in data["list"][:4]:
                dt = entry["dt_txt"]
                temp = entry["main"]["temp"]
                desc = entry["weather"][0]["description"]
                forecast += f"{dt}: {temp}¬∞C, {desc}\n"
        else:
            forecast += "\u26a0\ufe0f –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–≥–æ–¥—É."
    except requests.exceptions.HTTPError as e:
        logger.error(f"HTTP error from OpenWeather: {e}")
        forecast += "\u26a0\ufe0f –û—à–∏–±–∫–∞ HTTP –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–≥–æ–¥—ã."
    except ValueError as e:
        logger.error(f"JSON parse error: {e}")
        forecast += "\u26a0\ufe0f –û—à–∏–±–∫–∞ –ø–æ–¥—Ä–∞–∑–±–æ—Ä–∫–∏ JSON."
    except Exception as e:
        logger.error(f"Weather error: {e}")
        forecast += "\u26a0\ufe0f –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–≥–æ–¥–µ."

    # –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    reply_msg = (
        f"üåç –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã:\n"
        f"–®–∏—Ä–æ—Ç–∞: {lat:.5f}\n"
        f"–î–æ–ª–≥–æ—Ç–∞: {lon:.5f}\n\n"
        f"üìç –ê–¥—Ä–µ—Å: {address}\n"
        f"üïí –ú–µ—Å—Ç–Ω–æ–µ –≤—Ä–µ–º—è: {local_time} (Europe/Kiev)\n"
        f"{forecast}"
    )
    await message.reply_text(reply_msg)

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
    admin_msg = (
        f"üßΩ –õ–æ–∫–∞—Ü–∏—è –æ—Ç {username}\n"
        f"üìç –ê–¥—Ä–µ—Å: {address}\n"
        f"üåê –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {lat:.5f}, {lon:.5f}\n"
        f"üïí –í—Ä–µ–º—è: {local_time}\n"
        f"{forecast}"
    )
    await context.bot.send_message(chat_id=ADMIN_ID, text=admin_msg)


# === –ö–æ–º–∞–Ω–¥–∞ /start ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –ü—Ä–∏—à–ª–∏ —Å–≤–æ—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é üìç")


# === –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å Webhook ===
async def main():
    application = Application.builder().token(BOT_TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.LOCATION, handle_location))
    application.add_error_handler(error_handler)

    await application.initialize()
    await application.start()
    await application.bot.set_webhook(url=WEBHOOK_URL)
    await application.updater.start_webhook()
    await application.updater.wait_for_stop()
    await application.stop()
    await application.shutdown()


if __name__ == "__main__":
    asyncio.run(main())


