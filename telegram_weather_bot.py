import logging
import os
from datetime import datetime
import pytz
import requests
from telegram import (
    Update,
    KeyboardButton,
    ReplyKeyboardMarkup,
    ReplyKeyboardRemove,
)
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters,
)
from dotenv import load_dotenv

load_dotenv()

# –ö–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
BOT_TOKEN = os.getenv("BOT_TOKEN")
OWM_KEY = os.getenv("OWM_KEY")
GEOCODING_API_URL = "https://nominatim.openstreetmap.org/reverse"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [[KeyboardButton("üìç –ö–∞–∫ —Ç—ã, –¥—Ä—É–≥?", request_location=True)]]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –ü–æ–¥–µ–ª–∏—Å—å —Å–≤–æ–∏–º –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ–ºüëá", reply_markup=reply_markup)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
async def handle_location(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message = update.message
    user = message.from_user
    latitude = message.location.latitude
    longitude = message.location.longitude

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_name = user.username if user.username else f"ID:{user.id}"

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º
    address = await get_address(latitude, longitude)

    # –í—Ä–µ–º–µ–Ω–Ω–∞—è –∑–æ–Ω–∞
    local_time = get_local_time(latitude, longitude)

    # –ü–æ–≥–æ–¥–∞ –∏ –ø—Ä–æ–≥–Ω–æ–∑
    weather_info = await get_weather_forecast(latitude, longitude)

    # –û—Ç–≤–µ—Ç
    response = (
        f"@{user_name}, ‚úÖ –ü–æ–ª—É—á–µ–Ω–æ:\n"
        f"üåç –®–∏—Ä–æ—Ç–∞: {latitude:.5f}\n"
        f"üåç –î–æ–ª–≥–æ—Ç–∞: {longitude:.5f}\n\n"
        f"üìç –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: {address}\n\n"
        f"üïí –ú–µ—Å—Ç–Ω–æ–µ –≤—Ä–µ–º—è: {local_time}\n\n"
        f"{weather_info}"
    )

    await message.reply_text(response, reply_markup=ReplyKeyboardRemove())


# –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞ —á–µ—Ä–µ–∑ Nominatim
async def get_address(lat, lon):
    try:
        response = requests.get(GEOCODING_API_URL, params={
            "lat": lat,
            "lon": lon,
            "format": "json",
            "accept-language": "ru"
        }, timeout=10)
        data = response.json()
        return data.get("display_name", "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∞–¥—Ä–µ—Å")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–¥—Ä–µ—Å–∞: {e}")
        return "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∞–¥—Ä–µ—Å"


# –ü–æ–ª—É—á–µ–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
def get_local_time(lat, lon):
    try:
        timezone = "Europe/Chisinau"  # –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–º –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
        tz = pytz.timezone(timezone)
        return datetime.now(tz).strftime("%Y-%m-%d %H:%M:%S (%Z)")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏: {e}")
        return "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤—Ä–µ–º—è"


# –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–≥–æ–¥—ã
async def get_weather_forecast(lat, lon):
    try:
        url = "https://api.openweathermap.org/data/2.5/forecast"
        params = {
            "lat": lat,
            "lon": lon,
            "appid": OWM_KEY,
            "units": "metric",
            "lang": "ru",
            "cnt": 4  # –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ 4 —Ç—Ä—ë—Ö—á–∞—Å–æ–≤—ã—Ö –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
        }
        response = requests.get(url, params=params, timeout=10)
        data = response.json()

        if data.get("cod") != "200":
            return "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ."

        forecast = "üìä –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã (–Ω–∞ 12 —á):\n"
        for entry in data["list"]:
            dt = entry["dt_txt"]
            desc = entry["weather"][0]["description"].capitalize()
            temp = entry["main"]["temp"]
            wind = entry["wind"]["speed"]
            forecast += f"üïí {dt} ‚Äî {desc}, üå° {temp}¬∞C, üí® {wind} –º/—Å\n"

        return forecast
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–≥–æ–¥—ã: {e}")
        return "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ."


# –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫
if __name__ == "__main__":
    if not BOT_TOKEN or not OWM_KEY:
        raise ValueError("–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN –∏ OWM_KEY –Ω–µ –∑–∞–¥–∞–Ω—ã!")

    app = Application.builder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.LOCATION, handle_location))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()
