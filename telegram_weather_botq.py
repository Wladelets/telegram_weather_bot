import os
import json
import logging

from fastapi import FastAPI, Request
from telegram import Update, Bot, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters,
)
from geopy.geocoders import Nominatim
from dotenv import load_dotenv
from httpx import AsyncClient

# === –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è ===
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
OWNER_ID = int(os.getenv("OWNER_ID", 0))
OPENWEATHER_TOKEN = os.getenv("OPENWEATHER_TOKEN")

assert BOT_TOKEN, "‚ùå BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ .env"
assert OPENWEATHER_TOKEN, "‚ùå OPENWEATHER_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ .env"

bot = Bot(token=BOT_TOKEN)

# === –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã ===
WEBHOOK_PATH = f"/webhook/{BOT_TOKEN}"
WEBHOOK_URL = f"https://telegram-weather-botq.onrender.com{WEBHOOK_PATH}"

# === FastAPI-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ ===
app = FastAPI()

# === –ì–µ–æ–∫–æ–¥–µ—Ä ===
geolocator = Nominatim(user_agent="telegram-weather-bot")


def get_address(lat, lon):
    try:
        location = geolocator.reverse((lat, lon), language="ru")
        return location.address if location else "–ê–¥—Ä–µ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω"
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–¥—Ä–µ—Å–∞: {e}")
        return "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ –∞–¥—Ä–µ—Å–∞"


# === –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –ø–æ–≥–æ–¥—ã ===
async def get_weather(lat: float, lon: float) -> str:
    try:
        async with AsyncClient() as client:
            response = await client.get(
                "https://api.openweathermap.org/data/2.5/weather",
                params={
                    "lat": lat,
                    "lon": lon,
                    "appid": OPENWEATHER_TOKEN,
                    "units": "metric",
                    "lang": "ru",
                },
            )
            data = response.json()
            if response.status_code != 200 or "main" not in data:
                return "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–≥–æ–¥—É."
            return (
                f"üå§ {data['weather'][0]['description'].capitalize()}\n"
                f"üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {data['main']['temp']}¬∞C\n"
                f"ü§î –û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫: {data['main']['feels_like']}¬∞C\n"
                f"üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: {data['main']['humidity']}%\n"
                f"üí® –í–µ—Ç–µ—Ä: {data['wind']['speed']} –º/—Å"
            )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã: {e}")
        return "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã."


# === –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–≥–æ–¥—ã ===
async def get_forecast(lat: float, lon: float) -> str:
    try:
        async with AsyncClient() as client:
            response = await client.get(
                "https://api.openweathermap.org/data/2.5/forecast",
                params={
                    "lat": lat,
                    "lon": lon,
                    "appid": OPENWEATHER_TOKEN,
                    "units": "metric",
                    "lang": "ru",
                },
            )
            data = response.json()
            if response.status_code != 200 or "list" not in data:
                return "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã."

            forecasts = data["list"][:4]  # –±–ª–∏–∂–∞–π—à–∏–µ 4 –∑–∞–ø–∏—Å–∏ (–ø—Ä–∏–º–µ—Ä–Ω–æ 12 —á–∞—Å–æ–≤)
            result = "üìÖ –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ —á–∞—Å—ã:\n"
            for f in forecasts:
                time = f["dt_txt"][11:16]
                desc = f["weather"][0]["description"].capitalize()
                temp = f["main"]["temp"]
                wind = f["wind"]["speed"]
                result += f"üïí {time}: {desc}, üå° {temp}¬∞C, üí® {wind} –º/—Å\n"
            return result
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞: {e}")
        return "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–≥–æ–¥—ã."


# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ Telegram ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    keyboard = [[KeyboardButton(text="üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é", request_location=True)]]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)

    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –º–Ω–µ —Å–≤–æ—ë –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ:",
        reply_markup=reply_markup
    )

    if OWNER_ID:
        await context.bot.send_message(
            chat_id=OWNER_ID,
            text=f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{user.username or user.first_name} –Ω–∞–∂–∞–ª /start"
        )


async def handle_location(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        user = update.message.from_user
        location = update.message.location
        lat, lon = location.latitude, location.longitude

        context.user_data["last_location"] = (lat, lon)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã

        address = get_address(lat, lon)
        weather = await get_weather(lat, lon)

        map_url = (
            f"https://static-maps.yandex.ru/1.x/"
            f"?ll={lon},{lat}&size=450,300&z=14&l=map&pt={lon},{lat},pm2rdm"
        )

        caption = (
            f"üìç –®–∏—Ä–æ—Ç–∞: {lat}\n"
            f"–î–æ–ª–≥–æ—Ç–∞: {lon}\n"
            f"üè† –ê–¥—Ä–µ—Å: {address}\n\n{weather}"
        )

        await update.message.reply_photo(photo=map_url, caption=caption)

        if OWNER_ID:
            owner_msg = (
                f"üë§ @{user.username or user.first_name} –æ—Ç–ø—Ä–∞–≤–∏–ª –ª–æ–∫–∞—Ü–∏—é:\n{caption}"
            )
            await context.bot.send_photo(chat_id=OWNER_ID, photo=map_url, caption=owner_msg)

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ handle_location: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ª–æ–∫–∞—Ü–∏–∏.")


async def forecast(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        user_data = context.user_data.get("last_location")
        if not user_data:
            await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ—ë –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ /start.")
            return

        lat, lon = user_data
        forecast_text = await get_forecast(lat, lon)
        await update.message.reply_text(forecast_text)

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ forecast: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞.")


async def unknown(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ò–∑–≤–∏–Ω–∏, —è –Ω–µ –∑–Ω–∞—é —Ç–∞–∫—É—é –∫–æ–º–∞–Ω–¥—É.")


async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE):
    logging.error(f"–û—à–∏–±–∫–∞: {context.error}")


# === Telegram-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ ===
bot_app = ApplicationBuilder().token(BOT_TOKEN).build()
bot_app.add_handler(CommandHandler("start", start))
bot_app.add_handler(CommandHandler("forecast", forecast))  # ‚Üê –¥–æ–±–∞–≤–∏–ª–∏ forecast
bot_app.add_handler(MessageHandler(filters.LOCATION, handle_location))
bot_app.add_handler(MessageHandler(filters.COMMAND, unknown))
bot_app.add_error_handler(error_handler)


# === Webhook FastAPI endpoint ===
@app.post(WEBHOOK_PATH)
async def telegram_webhook(req: Request):
    data = await req.json()
    await bot_app.update_queue.put(Update.de_json(data, bot_app.bot))
    return {"ok": True}


# === –£—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ===
@app.on_event("startup")
async def on_startup():
    try:
        await bot_app.bot.set_webhook(WEBHOOK_URL)
        print(f"‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {WEBHOOK_URL}")
    except Exception as e:
        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å webhook: {e}")



